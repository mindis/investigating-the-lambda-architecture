# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=debs-q1-plug-1min

# YARN
yarn.package.path=file://${basedir}/target/${project.artifactId}-${pom.version}-dist.tar.gz
yarn.container.count=20
yarn.container.memory.mb=4096

# Task
task.class=ch.uzh.ddis.thesis.lambda_architecture.batch.debs.DebsQ1EsperPlug
task.inputs=kafka.debs
task.commit.ms=99999999999999
task.window.ms=60000
task.chooser.class=org.apache.samza.system.chooser.RoundRobinChooserFactory
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
task.checkpoint.replication.factor=2

# Store
stores.timewindow.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.timewindow.changelog=kafka.debs-q1-plug-1min-timewindow-store-changelog
stores.timewindow.key.serde=string
stores.timewindow.msg.serde=long

stores.history.factory=org.apache.samza.storage.kv.KeyValueStorageEngineFactory
stores.history.changelog=kafka.debs-q1-plug-1min-history-store-changelog
stores.history.key.serde=string
stores.history.msg.serde=double

# Metrics
metrics.reporters=snapshot,jmx
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.metrics-debs-q1-plug-1min
metrics.reporter.jmx.class=org.apache.samza.metrics.reporter.JmxReporterFactory

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.linkedlist.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.LinkedListSerdeFactory
serializers.registry.long.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.LongSerdeFactory
serializers.registry.double.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.DoubleSerdeFactory
serializers.registry.generic.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.GenericSerdeFactory
serializers.registry.srbench.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.SRBenchSerdeFactory
serializers.registry.debs.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.DebsSerdeFactory
serializers.registry.map.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.MapSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory
serializers.default=string

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=srbench
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=${runtime.kafka.zoo.host}
systems.kafka.producer.metadata.broker.list=${runtime.kafka.broker.list}
systems.kafka.producer.producer.type=async
systems.kafka.producer.batch.num.messages=200
systems.kafka.streams.metrics.samza.msg.serde=metrics

#Â Custom Task Options
custom.debs.window.size=1