# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=samza-srbench-q1-result

# YARN
yarn.package.path=file://${basedir}/target/${project.artifactId}-${pom.version}-dist.tar.gz

# Task
task.class=ch.uzh.ddis.thesis.lambda_architecture.batch.results.StoreResultTask
task.inputs=kafka.srbench-q1-result
task.commit.ms=99999999999999
task.window.ms=60000
task.chooser.class=org.apache.samza.system.chooser.RoundRobinChooserFactory

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.linkedlist.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.LinkedListSerdeFactory
serializers.registry.long.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.LongSerdeFactory
serializers.registry.generic.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.GenericSerdeFactory
serializers.registry.srbench.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.SRBenchSerdeFactory
serializers.registry.debs.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.DebsSerdeFactory
serializers.registry.map.class=ch.uzh.ddis.thesis.lambda_architecture.data.serde.MapSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory
serializers.default=string

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=map
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=${runtime.kafka.zoo.host}
systems.kafka.producer.metadata.broker.list=${runtime.kafka.broker.list}
systems.kafka.producer.producer.type=sync
systems.kafka.producer.batch.num.messages=100

# custom options
custom.result.mongodb.host=${runtime.mongodb.host}
custom.result.mongodb.port=${runtime.mongodb.port}
custom.result.mongodb.db=${runtime.experiment.type}